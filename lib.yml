SLANGINIT:
  calls:
    - sWORK
  code: |
    LD HL,($0001)
    LD (WBOOTBK),HL

    ; WORK ZERO CLEAR
    XOR A
    LD HL,__WORK__
    LD DE,__WORK__+1
    LD BC,__WORKEND__-__WORK__-1
    LD (HL),A
    LDIR

    LD IY,__IYWORK

    CALL __MAIN
    JP 0

LSXCALLS:
  code: |
    BDOS EQU $0005
    PRNOUT EQU $05
    INPOUT EQU $06
    DIRIO EQU $06
    DIRIN	EQU	$07
    GETS EQU $0A
    CONST	EQU	$0B
    lSCRN EQU $EFD0
    lLOC EQU $EFD6

WIDTH:
  param_count: 1
  code: |
    ; WIDTH not supported
    RET

PRMODE:
  param_count: 1
  code: |
    ; PRMODE not supported
    RET

BIT:
  param_count: 2
  calls:
    - RSHIFTHLDE
  code: |
    CALL RSHIFTHLDE
    BIT 0,L
    LD HL,0
    RET Z
    INC HL
    RET 

SET:
  param_count: 2
  calls:
    - ORHLDE
  code: |
    EX DE,HL
    LD A,L
    AND $0F
    LD HL,1
    JR Z,.set1
    .set2
    ADD HL,HL
    DEC A
    JR NZ,.set2
    .set1
    JP ORHLDE

RESET:
  param_count: 2
  calls:
    - ANDHLDE
  code: |
    EX DE,HL
    LD A,L
    AND $0F
    LD HL,$FFFE
    JR Z,.reset1
    .reset2
    SCF
    ADC HL, HL
    DEC A
    JR NZ,.reset2
    .reset1
    JP ANDHLDE

ABS:
  param_count: 1
  calls:
    - NEGHL
  code: |
    BIT 7,H
    CALL NZ,NEGHL
    RET

SGN:
  param_count: 1
  calls:
    - ABS
  code: |
    LD A,H
    OR L
    RET Z
    BIT 7,H
    LD HL,1
    JR ABS
    BIT 7,L
    LD H,0
    RET Z
    DEC H
    RET

SEX:
  param_count: 1
  code: |
    BIT 7,L
    LD H,0
    RET Z
    DEC H
    RET

RND:
  param_count: 1
  calls:
    - MULHLDE
    - MODHLDE
  code: |
    PUSH HL
    LD HL,(wRND)
    LD DE,$0383
    CALL MULHLDE
    LD A,L
    LD L,H
    LD A,R
    ADD A,H
    LD H,A
    LD (wRND),HL
    POP DE
    LD A,D
    OR E
    JR NZ,.rnd1
    EX DE,HL
    RET
    .rnd1
    JP MODHLDE
    wRND:
    DW $E933

SCREEN:
  param_count: 2
  calls:
    - sSCRN
  code: |
    LD H,E
    CALL sSCRN
    LD L,A
    LD H,0
    RET

STOP:
  param_count: 0
  code: |
    LD HL,(WBOOTBK)
    LD ($00001),HL
    JP 0

LOCATE:
  param_count: 2
  calls:
    - sLOC
  code: |
    EX DE,HL
    LD H,E
    JP sLOC

INKEY:
  param_count: 1
  calls:
    - sGETKY
    - sFLGET
    - sINKEY
  code: |
    LD A,L
    CP 1
    JR NC,.inkey1
    CALL sGETKY
    JR .inkey_end
    .inkey1 
    JR NZ,.inkey2
    CALL sFLGET
    JR .inkey_end
    .inkey2
    CALL sINKEY
    .inkey_end
    LD L,A
    LD H,0
    RET

LINPUT:
  param_count: 2
  calls:
    - sCSR
    - GETL
  code: |
    PUSH HL
    CALL sCSR
    LD D,L
    POP HL
    JR GETLPROC

GETL:
  param_count: 1
  calls:
    - GETLIN
  code: |
    LD E,0
GETLIN:
  param_count: 2
  calls:
    - sGETL
  code: |
    LD D,0
    GETLPROC:
    PUSH DE
    LD DE,sKBFAD
    CALL sGETL
    POP BC
    LD A,(DE)
    CP $1B
    JR NZ, .getlin1
    LD (HL),A
    LD HL,$FFFF
    RET
    .getlin1
    INC B
    DEC B
    JR Z,.getlin2
    LD A,(DE)
    OR A
    JR Z,.getlin2
    INC DE
    DEC B
    JR .getlin1
    .getlin2
    LD B,0
    .getlin4
    LD A,(DE)
    INC DE
    OR A
    JR Z,.getlin3
    LD (HL),A
    INC HL
    INC B
    DEC C
    JR NZ,.getlin4
    .getlin3
    LD (HL),0
    LD L,B
    LD H,0
    RET

INPUT:
  param_count: 0
  calls:
    - sWORK
    - LINPUT
    - sHLHEX
    - ADECI
  code: |
    LD BC,0
    LD (___CARRY),BC
    LD HL,sKBFAD
    LD DE,0
    CALL LINPUT
    LD DE,sKBFAD
    .linput2
    LD A,(DE)
    CP $20
    JR NZ, .input1
    INC DE
    JR .linput2
    .input1
    LD A,(DE)
    CP $24
    JR NZ,.input3
    INC DE
    CALL sHLHEX
    JR C,.input4
    RET
    .input3
    LD HL,0
    LD A,(DE)
    CALL ADECI
    JR C,.input4
    .input5
    ADD HL,HL
    LD B,H
    LD C,L
    ADD HL,HL
    ADD HL,HL
    ADD HL,BC
    LD B,0
    LD C,A
    ADD HL,BC
    INC DE
    LD A, (DE)
    CALL ADECI
    JR NC, .input5
    RET
    .input4
    LD BC,1
    LD (___CARRY),BC
    LD HL,0
    RET

ADECI:
  param_count: 0
  code: |
    SUB $30
    RET C
    CP $0A
    CCF
    RET

PTAB:
  param_count: 1
  calls:
    - PCR1
  code: |
    LD E,$09
    JR PCR1

PSPC:
  param_count: 1
  calls:
    - PCR1
  code: |
    LD E,' '
    JR PCR1

PCRONE:
  param_count: 0
  calls:
    - PCR
  code: |
    LD HL,1

PCR:
  param_count: 1
  calls:
    - PSTR2
  code: |
    EX DE,HL
    LD HL,$0D0A
    JR PSTR2

PCR1:
  param_count: 1
  calls:
    - PSTR
  code: |
    EX DE,HL

PSTR:
  param_count: 2
  calls:
    - PRT
  code: |
    .pstr1
    LD A,D
    OR E
    RET Z
    LD A,L
    CALL PRT
    DEC DE
    JR .pstr1

PSTR2:
  param_count: 2
  calls:
    - PCHR
  code: |
    .pstr1
    LD A,D
    OR E
    RET Z
    CALL PCHR
    DEC DE
    JR .pstr1

PCHR:
  calls:
    - PRT
  code: |
    LD A, H
    CALL PRT
    LD A, L
    JR PRT

CRDISP:
  calls:
    - PRT
  code: |
    LD A,$0D
    JR PRT

PHEX4:
  param_count: 1
  calls:
    - PHEX2
  code: |
    LD A,H
    CALL PHEX

PHEX2:
  param_count: 1
  calls:
    - PHEX
  code: |
    LD A,L

PHEX:
  param_count: 1
  calls:
    - SASC
    - PRT
  code: |
    PUSH AF
    RRCA
    RRCA
    RRCA
    RRCA
    CALL SASC
    CALL PRT

    POP AF
    CALL SASC

PRT:
  param_count: 1
  code: |
    PUSH HL
    PUSH DE
    PUSH BC
    LD E,A
    LD C,$06
    CALL $0005
    POP BC
    POP DE
    POP HL
    RET

    WORK10:
    DB  "12345",0
    DS  4

PSIGN:
  param_count: 1
  calls:
    - PRT
    - NEGHL
    - P10
  code: |
    BIT 7, H
    JR Z,.psign1
    LD A, $2D
    CALL PRT
    CALL NEGHL
    .psign1

P10:
  function_type: Machine
  param_count: 1
  calls:
    - P10to5
    - P10toN
  code: |
    LD DE, -1
    JR P10toN

P10to5:
  function_type: Machine
  param_count: 1
  calls:
    - P10toN
  code: |
    LD DE, 0005

P10toN:
  calls:
    - PRT
    - VTOS
    - PMSX
  function_type: Machine
  param_count: 2
  code: |
    PUSH DE
    LD DE, WORK10
    CALL VTOS
    EX DE, HL
    POP DE
    LD A, E
    CP $05
    JR NC, .p10ton1
    LD A, $05
    SUB E
    .p10ton2
    INC HL
    DEC A
    JR NZ, .p10ton2
    JR PMSX
    .p10ton1
    LD A, E
    CP $FF
    JR NZ, PMSX
    .p10ton4
    LD A, (HL)
    CP $20
    JR NZ, PMSX
    INC HL
    JR .p10ton4

PMSX:
  calls:
    - PMSX1
  code: |
    LD B, 00

PMSX1:
  calls:
    - PRT
    - PMSG
  code: |
    LD A, (HL)
    CP B
    RET Z
    CALL PRT
    INC HL
    JR PMSX1

PMSG:
  calls:
    - PMSX1
  code: |
    LD B, $0D
    JR PMSX1

MPRNT:
  calls:
    - PRT
  code: |
    EX (SP),HL
    .mprnt2
    LD A, (HL)
    INC HL
    OR A
    JR Z, .mprnt1
    CALL PRT
    JR .mprnt2
    .mprnt1
    EX (SP),HL
    RET

VTOS:
  function_type: Machine
  param_count: 2
  calls:
    - DIVHLDE8
  code: |
    PUSH HL
    EXX
    POP HL
    EXX
    LD HL, $0005
    ADD HL, DE
    LD (HL), $00
    LD B, $05
    .vtos1
    EXX
    LD E, $0A
    CALL DIVHLDE8
    LD A, E
    ADD A, $30
    EXX
    DEC HL
    LD (HL), A
    DJNZ .vtos1
    LD B, $04
    .vtos3
    LD A, (HL)
    CP $30
    JR NZ, .vtos2
    LD (HL), $20
    INC HL
    DJNZ .vtos3
    .vtos2
    RET

CALL:
  inside_name: RCALL
  calls:
    - GETREG
  code: |
    PUSH IY
    LD DE,.call1
    PUSH DE
    PUSH HL
    LD A,(___AF)
    LD BC,(___BC)
    LD DE,(___DE)
    LD HL,(___HL)
    LD IX,(___IX)
    LD IY,(___IY)
    RET
    .call1
    PUSH HL
    CALL GETREG
    LD HL,0006
    ADD HL,SP
    POP HL
    POP IY
    RET

GETREG:
  code: |
    PUSH HL
    LD (___IY), IY
    LD (___IX), IX
    LD (___HL), HL
    LD (___DE), DE
    LD (___BC), BC
    PUSH AF
    POP HL
    LD (___AF), HL
    LD HL, 0000
    JR NC, .getreg1
    INC HL
    .getreg1
    LD (___CARRY), HL
    LD HL, 0000
    JR NZ, .getreg2
    INC HL
    .getreg2
    LD (___ZERO), HL
    LD HL, 0004
    ADD HL, SP
    LD (___SP), HL
    POP HL
    RET

SASC:
  code: |
    AND	$0F
    ADD	A,'0'
    CP	3AH
    CCF
    RET	NC
    ADD	A,'A'-$3A
    RET

sSYSTEM:
  param_count: 0
  calls:
    - LSXCALLS
  code: |
    EXX
    PUSH	BC
    PUSH	DE
    PUSH	HL
    PUSH	IX
    PUSH	IY
    EXX
    CALL	$0005
    EXX
    POP	IY
    POP	IX
    POP	HL
    POP	DE
    POP	BC
    EXX
    RET

sMSG:
  param_count: 0
  calls:
    - LSXCALLS
    - sMSX
  code: |
    PUSH	HL
    LD	H,$0D
    JR	sMSG1

sMSX:
  param_count: 0
  calls:
    - LSXCALLS
    - sPRINT
  code: |
    PUSH	HL
    LD	H,0
    sMSG1:
    PUSH	AF
    PUSH	DE
    sMSX1:
    LD	A,(DE)
    CP	H
    JR	Z,sMSX2
    CALL	sPRINT
    INC	DE
    JR	MSX1
    sMSX2:
    POP	DE
    POP	AF
    POP	HL
    RET

sLPTOF:
  param_count: 0
  code: |
    RET

sLPTON:
  param_count: 0
  code: |
    RET

sWIDCH:
  param_count: 0
  code: |
    RET

sMPRNT:
  param_count: 0
  calls:
    - sPRINT
  code: |
    EX	(SP),HL
    .mprnt1
    LD	A,(HL)
    INC	HL
    OR	A
    CALL	NZ,sPRINT
    OR	A
    JR	NZ,.mprnt1
    EX	(SP),HL
    RET

sNL:
  param_count: 0
  calls:
    - sZPRINT
    - sWORK
  code: |
    PUSH	AF
    LD	A,(sXYADR)
    OR	A
    JR	Z,.nlx
    CALL	sZPRINT
    DB	$0D,$0A,0
    CALL	PCLR
    .nlx
    POP	AF
    RET

sPRINTS:
  param_count: 0
  calls:
    - sPRINT
  code: |
    PUSH	AF
    LD	A,$20
    LTNL1:
    CALL	sPRINT
    POP	AF
    RET

sLTNL:
  param_count: 0
  calls:
    - sPRINTS
  code: |
    PUSH	AF
    LD	A,$0D
    JR	LTNL1

sCSR:
  param_count: 0
  calls:
    - sWORK
  code: |
    LD	HL,(sXYADR)
    RET

sSCRN:
  param_count: 0
  calls:
    - lLOC1
  code: |
    ; for LSX-Dodgers
    PUSH BC
    CALL lLOC1
    LD	C,L
    LD	A,H
    OR	030H
    LD	B,A
    CALL lSCRN
    POP BC
    ;LD	A,$20
    RET

lLOC1:
  param_count: 0
  calls:
    - sWORK
  code: |
    PUSH	DE
    LD	C,L
    LD	B,8
    LD	E,H
    LD	D,0
    LD	HL,(sCRTCD)
    LD	L,D
    .LOC2
    ADD	HL,HL
    JR	NC,.LOC3
    ADD	HL,DE
    .LOC3
    DJNZ	.LOC2
    ADD	HL,BC
    POP	DE
    RET

sLOC:
  param_count: 0
  calls:
    - sWORK
    - sPCLR
    - sZPRINT
  code: |
    CALL	sPCLR
    LD	A,H
    ADD	A,$20
    LD	(sLOCY),A
    LD	A,L
    ADD	A,$20
    LD	(sLOCX),A
    CALL	sZPRINT
    DB	$1B,"Y"
    sLOCY:	DB	$20
    sLOCX:	DB	$20
    DB	0
    AND	A		;CF=0
    RET

sPAUSE:
  param_count: 0
  calls:
    - sBRKEY
    - sGETKY
    - sINKEY
    - sBRKEY
  code: |
    CALL	sBRKEY
    JR	Z,.pause2
    CP	$20
    JR	NZ,.pause1
    .null
    CALL	sGETKY
    OR	A
    JR	NZ,NULL
    CALL	sINKEY
    CALL	BRKEY1
    JR	Z,.pause2

    .pause1
    EX	(SP),HL
    INC	HL
    INC	HL
    EX	(SP),HL
    RET

    .pause2
    EX	(SP),HL
    LD	A,(HL)
    INC	HL
    LD	H,(HL)
    LD	L,A
    EX	(SP),HL
    RET

sBRKEY:
  param_count: 0
  calls:
    - sGETKY
  code: |
    CALL	sGETKY
    BRKEY1:
      CP	$1B
      RET	Z
      CP	3
      RET

sHEX:
  param_count: 0
  calls:
    - sCAP
  code: |
    CALL	sCAP
    SUB	$30
    RET	C
    CP	$0A
    CCF
    RET	NC
    CP	$11
    RET	C
    SUB	7
    CP	$10
    CCF
    RET

sCAP:
  param_count: 0
  code: |
    CP	"a"
    RET	C
    CP	"z"+1
    RET	NC
    SUB	$20
    RET

sZPRINT:
  param_count: 0
  calls:
    - sSYSTEM
  code: |
    EX	(SP),HL
    .zprnt1
    LD	A,(HL)
    INC	HL
    OR	A
    JR	Z,.zprnt2
    CALL	.zprnt3
    JR	.zprnt1
    .zprnt2
    EX	(SP),HL
    RET

    .zprnt3
    PUSH	BC
    PUSH	DE
    PUSH	HL
    LD	E,A
    LD	C,INPOUT
    CALL sSYSTEM
    POP	HL
    POP	DE
    POP	BC
    RET

BEEP:
  param_count: 0
  calls:
    - sPRNT0
  code: |
    PUSH	AF
    LD	A,7
    JR	sPRNT01

sPRNT0:
  param_count: 0
  calls:
    - sPRINT
  code: |
    PUSH	AF
    CP	$20
    JR	NC,sPRNT01
    LD	A,$20
    sPRNT01:
    CALL	sPRINT
    POP	AF
    RET

sGETL:
  param_count: 0
  calls:
    - sPRINT
    - sWORK
    - sFGETL
    - sKYBFC
  code: |
    PUSH	BC
    PUSH	HL
    PUSH	DE

    ;----------------
    ;Breakを抑制
    LD	HL,($0001)
    LD	(WBOOTBK),HL
    LD	HL,.zgetlbrk
    LD	(00001H),HL
    LD	(sSPBK),SP
    ;----------------

    CALL	sFGETL
    JR	NC,.zgetl2
    CALL	sKYBFC

    LD	DE,sKBFAD0
    LD	A,80
    LD	(DE),A
    LD	C,GETS
    CALL	sSYSTEM
    .zgetl2
    JR	.zgetnobrk

    ;----------------
    ;Break押されて飛んできたのでSPを戻す
    .zgetlbrk
    LD	HL,(sSPBK)
    LD	SP,HL
    LD	A,01BH
    LD	(sKBFADX),A	; ESC(break)
    ;----------------
    .zgetnobrk

    ; WBOOTアドレスを戻す
    LD	HL,(WBOOTBK)
    LD	(00001H),HL

    POP	DE
    PUSH	DE
    LD	B,80
    LD	A,(sKBFADX)	;break
    CP	$0D
    JR	Z,.getp0
    CP	9
    JR	Z,.getp0
    CP	$20
    JR	NC,.getp0
    LD	A,$1B
    LD	(DE),A
    INC	DE
    DEC	B
    JR	.getl2
    .getp0
    LD	A,(sXYADR)
    OR	A
    JR	Z,.getl0
    LD	C,A
    LD	HL,sPRBF
    .getp1
    LD	A,(HL)
    INC	HL
    LD	(DE),A
    INC	DE
    DEC	B
    JR	Z,.getl3
    DEC	C
    JR	NZ,.getp1
    .getl0
    LD	HL,sKBFADX
    .getl1
    LD	A,(HL)
    INC	HL
    CP	9
    JR	NZ,.getlt
    LD	A,$20
    JR	.getlt2
    .getlt
    CP	$20
    JR	C,.getl2
    .getlt2
    LD	(DE),A
    INC	DE
    DJNZ	.getl1
    JR	.getl3
    .getl2
    XOR	A
    LD	(DE),A
    INC	DE
    DJNZ	.getl2
    .getl3
    POP	DE
    POP	HL
    POP	BC
    LD	A,$0D
    JP	sPRINT

sFGETL:
  param_count: 0
  calls:
    - sWORK
    - sBRKEY
    - sINKBF
  code: |
    CALL	.fgetl1
    RET	C

    LD	HL,$0D00
    LD	(sKBFAD1),HL
    RET
    .fgetl1
    CALL	sBRKEY
    SCF
    RET	Z
    CALL	sINKBF
    ;
    CP	$0D
    RET	Z
    CP	$0A
    JR	Z,.fgetl1
    ;
    OR	A
    SCF
    RET	Z
    CP	$1A
    SCF
    RET	Z
    ;
    CP	$09
    JR	NZ,.fgetl2
    LD	A,$20
    .fgetl2
    CALL	sPRINT
    JR	.fgetl1

sINKBF:
  param_count: 0
  calls:
    - sWORK
  code: |
    PUSH	HL
    LD	HL,(sSUBPS)
    LD	A,H
    XOR	L
    JR	Z,.inkbf1
    LD	A,H
    INC	A
    LD	(sSUBPS+1),A
    LD	L,A
    LD	H,sSUBBF/256
    LD	A,(HL)
    SCF
    .inkbf1
    POP	HL
    RET

sASC:
  param_count: 0
  code: |
    AND	$0F
    OR	$30
    CP	$3A
    RET	C
    ADD	A,7
    RET

sGETKY:
  param_count: 0
  calls:
    - LSXCALLS
    - sFLGET
  code: |
    PUSH	BC
    PUSH	DE
    PUSH	HL
    LD	E,$FF
    LD	C,INPOUT
    JR	GETKY1

sFLGET:
  param_count: 0
  calls:
    - sSYSTEM
  code: |
    PUSH	BC
    PUSH	DE
    PUSH	HL
    LD	C,DIRIN
    GETKY1:
    CALL	sSYSTEM
    POP	HL
    POP	DE
    POP	BC
    CP	4
    JR	NZ,.fl1
    LD	A,$1C
    RET
    .fl1
    CP	5
    JR	NZ,.fl2
    LD	A,$1E
    RET
    .fl2
    CP	$13
    JR	NZ,.fl3
    LD	A,$1D
    RET
    .fl3
    CP	$18
    JR	NZ,.fl4
    LD	A,$1F
    RET
    .fl4
    AND	A
    RET

sINKEY:
  param_count: 0
  calls:
    - sGETKY
  code: |
    CALL	sGETKY
    OR	A
    JR	Z,sINKEY
    RET

sLPRNT:
  param_count: 0
  calls:
    - sSYSTEM
  code: |
    PUSH	BC
    PUSH	DE
    PUSH	HL
    LD	E,A
    LD	C,$05		;PRNOUT
    CALL	sSYSTEM
    POP	HL
    POP	DE
    POP	BC
    ADD	A,$01
    RET

sKYBFC:
  param_count: 0
  calls:
    - sSYSTEM
    - sWORK
  code: |
    PUSH	AF
    PUSH	BC
    PUSH	DE
    PUSH	HL
    LD	HL,0
    LD	(sSUBPS),HL
    .keybc1
    LD	E,$FF
    LD	C,$06
    CALL	sSYSTEM
    OR	A
    JR	NZ,.keybc1
    POP	HL
    POP	DE
    POP	BC
    POP	AF
    RET

sPRINT:
  param_count: 0
  calls:
    - sWORK
    - sCTRL
    - sSYSTEM
  code: |
    PUSH	BC
    PUSH	DE
    PUSH	HL
    PUSH	AF
    LD	E,A
    CP	$1B
    JR	C,sCTRL
    .print1
    LD	HL,(sXYADR)
    LD	H,0
    LD	A,L
    SUB	80
    JR	C,.pr1
    LD	L,0
    .pr1
    INC	L
    LD	(sXYADR),HL
    DEC	L
    LD	BC,sPRBF
    ADD	HL,BC
    LD	(HL),E
    sPRINT2:
    LD	C,$06		;INPOUT
    CALL	sSYSTEM
    sPRINT3:
    POP	AF
    POP	HL
    POP	DE
    POP	BC
    AND	A
    RET

sPCLR:
  param_count: 0
  calls:
    - sWORK
  code: |
    XOR	A
    LD	(sXYADR),A
    RET

sCTRL:
  param_count: 0
  calls:
    - sWORK
    - sPCLR
    - sSYSTEM
    - sPRINT
    - sZPRINT
  code: |
    CP	$0D
    JR	Z,.CTRL_M
    CP	7
    JR	Z,sPRINT2
    CP	$0C
    JR	Z,.CTRL_L
    CP	$1A
    JR	Z,.CTRL_Z
    CP	$0B
    JR	Z,.CTRL_K
    CP	9
    JR	Z,.CTRL_I
    JR	sPRINT3
    .CTRL_M
    CALL	sPCLR
    LD	C,$06		;INPOUT
    CALL	sSYSTEM
    LD	E,$0A		;CRLF
    JR	sPRINT2
    .CTRL_L
    CALL	sPCLR
    CALL	sZPRINT
    .CTLX1
    DB	$1B,"E",0
    JR	sPRINT3
    .CTRL_Z
    CALL	sZPRINT
    .CTZX1
    DB	$1B,"J",0
    JR	sPRINT3
    .CTRL_K
    CALL	sPCLR
    CALL	sZPRINT
    .CTKX1
    DB	$1B,"H",0
    JR	sPRINT3
    .CTRL_I
    LD	A,(sXYADR)
    AND	7
    LD	B,A
    LD	A,8
    SUB	B
    LD	B,A
    .CTRL_I1
    LD	A,$20
    CALL	sPRINT
    DJNZ	.CTRL_I1
    JR	sPRINT3

sBOOT:
  param_count: 0
  code: |
    LD	HL,0
    LD	($0001),HL
    JP	0

sHLHEX:
  param_count: 0
  calls:
    - sHEX
  code: |
    PUSH	HL
    PUSH	DE
    CALL	HLHEX5
    JR	C,HLHEX3
    LD	L,A
    LD	H,0
    HLHEX1:
    CALL	HLHEX6
    JR	C,HLHEX2
    ADD	HL,HL
    ADD	HL,HL
    ADD	HL,HL
    ADD	HL,HL
    ADD	A,L
    LD	L,A
    LD	A,$00
    ADC	A,H
    LD	H,A
    JR	HLHEX1
    HLHEX2:
    POP	AF
    POP	AF
    XOR	A
    RET
    HLHEX3:
    POP	DE
    POP	HL
    SCF
    RET
    HLHEX4:
    INC	DE
    HLHEX5:
    LD	A,(DE)
    CP	$20
    JR	Z,HLHEX4
    HLHEX6:
    LD	A,(DE)
    CALL	sHEX
    RET	C
    INC	DE
    RET

sWORK:
  param_count: 0
  code: |
    ;WIDTH	EQU	80
    ;_WIDTH:	DB	WIDTH
    ;_XYADR:	DW	XYADR
    sCRTCD: DB $6F
    sWIDTH: DB 80

    sXYADR:	DW	0

    sKBFAD:	DS	128
    sKBFAD0:	DB	80
    sKBFAD1:	DB	0
    sKBFADX:	DS	80
    DB 0

    sPRBF:	DS	80
    sSUBPS:	DW	0
    sSUBBF: DS	256
    sSPBK: DW 0
    WBOOTBK: DW 1

